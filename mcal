#!/bin/bash

# To Do's
# Add relative date commands for day's of the week
# Add command to show entire week

if [[ $# -eq 0 ]] ; then
  mcal today
  exit 0
fi

THIS_DIR=$(pwd)
if [ "$THIS_DIR" != "/Users/max/Dropbox/MCal/data" ] ; then
  # echo "Incorrect directory!"
  cd "/Users/max/Dropbox/MCal/data"
fi

# template

#        >> TODAY <<
# [date] WED 21 November 2018
# [morn] Optical transport
# [aftn] Prjct Mngmt Workshop
# [evng] Thesis plan
# [oth1] Order frictions

# auto-complete

touch ../today
touch ../add
touch ../tomorrow
touch ../yesterday
touch ../morn
touch ../aftn
touch ../oth1
touch ../evng
touch ../mark
touch ../all

# date-variables

DFILE="+%Y-%m-%d"
DHUMAN="+%a %b %d %Y"

TODAY=$(date $DFILE)
YESTERDAY=$(date -v-1d $DFILE)
TOMORROW=$(date -v+1d $DFILE)

HUMAN_TODAY=$(date "$DHUMAN")
HUMAN_YESTERDAY=$(date -v-1d "$DHUMAN")
HUMAN_TOMORROW=$(date -v+1d "$DHUMAN")

FILE_TODAY=$TODAY".txt"
FILE_TOMORROW=$TOMORROW".txt"
FILE_YESTERDAY=$YESTERDAY".txt"

# add field entry
if [ "$1" = "add" ] ; then

  # find the required date:
  if [ "$2" = "today" ] ; then
    echo -e "\033[32m Amending today... \033[0m"
    FILE_THIS=$FILE_TODAY
  elif [ "$2" = "tomorrow" ] ; then
    echo -e "\033[32m Amending tomorrow... \033[0m"
    FILE_THIS=$FILE_TOMORROW
  elif [ "$2" = "yesterday" ] ; then
    echo -e "\033[32m Amending yesterday... \033[0m"
    FILE_THIS=$FILE_YESTERDAY
  elif [ "$2" = "" ] ; then
    echo -e "\033[31m No file given. \033[0m"
    exit 0
  else
    FILE_THIS=$2
    echo -e "\033[32m Amending "$FILE_THIS"... \033[0m"
  fi

  # if required date does not exist:
  if [ ! -f $FILE_THIS ]; then
    # get the required date in human form:
    echo -e "\033[32m New file created. \033[0m"
    THIS_DATE=${FILE_THIS%.txt}
    THIS_DATE_HUMAN=$(date -j -f "%Y-%m-%d" "$THIS_DATE" "$DHUMAN")
    # write the required date:
    echo " [date] "$THIS_DATE_HUMAN > $FILE_THIS
    if [ "$3" = "all" ] ; then
      echo " [morn] "$4 >> $FILE_THIS
      echo " [aftn] "$4 >> $FILE_THIS
      echo " [evng] "$4 >> $FILE_THIS
      exit 1
    else
      echo " [morn] " >> $FILE_THIS
      echo " [aftn] " >> $FILE_THIS
      echo " [evng] " >> $FILE_THIS
    fi
  fi

  # store current data:
  i=0
  while read p; do
    if [ $i -eq 0 ] ; then
      echo "$p" > temp.txt
      i=1
    else 
      echo "$p" >> temp.txt
    fi
  done < $FILE_THIS

  if [ "$3" = "all" ] ; then

    # loop over current data:
    i=1
    while read p; do

      # first line is copied: 
      if [ $i -eq 1 ] ; then
        echo "$p" > $FILE_THIS
        FIELD_GOAL="[morn]"
      else
        # compare fields:
        FIELD=$(echo "$p" | cut -c1-6)
        FIELD_GOAL_START=$(echo "$FIELD_GOAL" | cut -c1-4)
        if [ "$FIELD" = "$FIELD_GOAL" ] ; then
          echo "$FIELD"" ""$4" >> $FILE_THIS
          if [ "$FIELD" = "[morn]" ] ; then FIELD_GOAL="[aftn]"; fi
          if [ "$FIELD" = "[aftn]" ] ; then FIELD_GOAL="[evng]"; fi
        else
          echo "$p" >> $FILE_THIS
        fi
      fi
      let "i=i+1"
    done < temp.txt

    exit 1

  else

    # loop over current data:
    i=1
    found=0
    while read p; do

      # first line is copied: 
      if [ $i -eq 1 ] ; then
        echo "$p" > $FILE_THIS
        let "i=i+1"
      else
        # compare fields:
        FIELD=$(echo "$p" | cut -c1-6)
        FIELD_GOAL="[""$3""]"
        FIELD_GOAL_START=$(echo "$FIELD_GOAL" | cut -c1-4)
        if [ "$FIELD" = "$FIELD_GOAL" ] ; then
          if [ "$FIELD_GOAL_START" = "[oth" ] ; then
            echo "$FIELD_GOAL""n""$4" >> $FILE_THIS
          else 
            echo "$FIELD"" ""$4" >> $FILE_THIS
          fi
          found=1
        else
          echo "$p" >> $FILE_THIS
          # if didn't find keyword and last line
          NUMOFLINES=$(wc -l < "temp.txt")
          if [ $found -eq 0 ] ; then
            if [ $i -ge $NUMOFLINES ] ; then
              echo -e "\033[32m New field created. \033[0m"
              if [ "$FIELD_GOAL_START" = "[oth" ] ; then
                echo "$FIELD_GOAL""n""$4" >> $FILE_THIS
              else 
                echo "$FIELD_GOAL"" ""$4" >> $FILE_THIS
              fi
            fi
          fi
        fi
        let "i=i+1"
      fi
    done < temp.txt

  fi

  exit 1

fi

# open in nano

if [ $1 = "edit" ] ; then
  # find the required date:
  if [ "$2" = "today" ] ; then
    echo -e "\033[32m Editing today... \033[0m"
    FILE_THIS=$FILE_TODAY
  elif [ "$2" = "tomorrow" ] ; then
    echo -e "\033[32m Editing tomorrow... \033[0m"
    FILE_THIS=$FILE_TOMORROW
  elif [ "$2" = "yesterday" ] ; then
    echo -e "\033[32m Editing yesterday... \033[0m"
    FILE_THIS=$FILE_YESTERDAY
  elif [ "$2" = "" ] ; then
    echo -e "\033[31m No file given. \033[0m"
    exit 0
  else
    FILE_THIS=$2
    echo -e "\033[32m Editing "$FILE_THIS"... \033[0m"
  fi

  nano $FILE_THIS
  exit 0

fi

# mark to-do's:
if [ "$1" = "mark" ] ; then

  # find the required date:
  if [ "$2" = "today" ] ; then
    echo -e "\033[32m Toggling ["$3"] in today... \033[0m"
    FILE_THIS=$FILE_TODAY
  elif [ "$2" = "tomorrow" ] ; then
    echo -e "\033[32m Toggling ["$3"] in tomorrow... \033[0m"
    FILE_THIS=$FILE_TOMORROW
  elif [ "$2" = "yesterday" ] ; then
    echo -e "\033[32m Toggling ["$3"] in yesterday... \033[0m"
    FILE_THIS=$FILE_YESTERDAY
  elif [ "$2" = "" ] ; then
    echo -e "\033[31m No file given. \033[0m"
    exit 0
  else
    FILE_THIS=$2
    echo -e "\033[32m Toggling ["$3"] in "$FILE_THIS"... \033[0m"
  fi

  # if required date does not exist:
  if [ ! -f $FILE_THIS ]; then
    # get the required date in human form:
    echo -e "\033[32m New file created. \033[0m"
    THIS_DATE=${FILE_THIS%.txt}
    THIS_DATE_HUMAN=$(date -j -f "%Y-%m-%d" "$THIS_DATE" "$DHUMAN")
    # write the required date:
    echo " [date] "$THIS_DATE_HUMAN > $FILE_THIS
    echo " [morn] " >> $FILE_THIS
    echo " [aftn] " >> $FILE_THIS
    echo " [evng] " >> $FILE_THIS
  fi

  # store current data:
  i=0
  while read p; do
    if [ $i -eq 0 ] ; then
      echo "$p" > temp.txt
      i=1
    else 
      echo "$p" >> temp.txt
    fi
  done < $FILE_THIS

  # loop over current data:
  i=1
  found=0
  while read p; do

    # first line is copied: 
    if [ $i -eq 1 ] ; then
      echo "$p" > $FILE_THIS
      let "i=i+1"
    else
      # compare fields:
      FIELD=$(echo "$p" | cut -c1-6)
      FIELD_GOAL="[""$3""]"
      FIELD_GOAL_START=$(echo "$FIELD_GOAL" | cut -c1-4)
      STATUS=$(echo "$p" | cut -c7-7)
      if [ "$FIELD" = "$FIELD_GOAL" ] ; then
        END=$(echo "$p" | cut -c8-)
        if [ "$STATUS" = "n" ] ; then
          echo "$FIELD""y""$END" >> $FILE_THIS
        elif [ "$STATUS" = "y" ] ; then
          echo "$FIELD""n""$END" >> $FILE_THIS
        fi
        found=1
      else
        echo $p >> $FILE_THIS
      fi
      let "i=i+1"
    fi
  done < temp.txt

  exit 1

fi

# show calendar

# find the correct file
if [ "$1" = "today" ] ; then
  FILE_THIS=$FILE_TODAY
elif [ "$1" = "tomorrow" ] ; then
  FILE_THIS=$FILE_TOMORROW
elif [ "$1" = "yesterday" ] ; then
  FILE_THIS=$FILE_YESTERDAY
else
  FILE_THIS=$1
fi

# if required date does not exist:
if [ ! -f $FILE_THIS ]; then
  # get the required date in human form:
  echo -e "\033[32m New file created. \033[0m"
  THIS_DATE=${FILE_THIS%.txt}
  THIS_DATE_HUMAN=$(date -j -f "%Y-%m-%d" "$THIS_DATE" "$DHUMAN")
  # write the required date:
  echo " [date] "$THIS_DATE_HUMAN > $FILE_THIS
  echo " [morn] " >> $FILE_THIS
  echo " [aftn] " >> $FILE_THIS
  echo " [evng] " >> $FILE_THIS
fi

echo ""

while read p; do

  # split up the line:
  FIELD=$(echo "$p" | cut -c2-5)
  CONTENT=$(echo "$p" | cut -c8- )
  STATUS=$(echo "$p" | cut -c7-7)

  # set color
  if [ "$FIELD" = "date" ] ; then
    COL="38;5;202"
  elif [ "$FIELD" = "morn" ] ; then
    COL="34"
  elif [ "$FIELD" = "aftn" ] ; then
    COL="34"
  elif [ "$FIELD" = "evng" ] ; then
    COL="34"
  else
    if [ "$STATUS" = "y" ] ; then
      COL="32"
    elif [ "$STATUS" = "n" ] ; then
      COL="31"
    else
      COL="35"
    fi
  fi

  # color strings
  COL_CLEAR="\033[0m"
  COL_FIELD="\033[1;""$COL""m"
  COL_CONTENT="\033["$COL"m"

  echo -e "$COL_CLEAR""[""$COL_FIELD""$FIELD""$COL_CLEAR""]"" ""$COL_CONTENT""$CONTENT"

done < $FILE_THIS

echo -e "\033[0m"
