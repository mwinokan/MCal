if [[ $# -eq 0 ]] ; then
  mcal today
  exit 0
fi

THIS_DIR=$(pwd)
if [ "$THIS_DIR" != "/Users/max/Dropbox/MCal/data" ] ; then
  # echo "Incorrect directory!"
  cd "/Users/max/Dropbox/MCal/data"
fi

# template

#        >> TODAY <<
# [date] WED 21 November 2018
# [morn] Optical transport
# [aftn] Prjct Mngmt Workshop
# [evng] Thesis plan
# [othr] Order frictions

# auto-complete

touch today
touch add
touch tomorrow
touch yesterday
touch morn
touch aftn
touch oth1
touch evng

# date-variables

DFILE="+%Y-%m-%d"
DHUMAN="+%a %b %d %Y"

TODAY=$(date $DFILE)
YESTERDAY=$(date -v-1d $DFILE)
TOMORROW=$(date -v+1d $DFILE)

HUMAN_TODAY=$(date "$DHUMAN")
HUMAN_YESTERDAY=$(date -v-1d "$DHUMAN")
HUMAN_TOMORROW=$(date -v+1d "$DHUMAN")

FILE_TODAY=$TODAY".txt"
FILE_TOMORROW=$TOMORROW".txt"
FILE_YESTERDAY=$YESTERDAY".txt"

# write files

# echo " [date] "$HUMAN_TODAY > $FILE_TODAY
# echo " [morn] "$HUMAN_TODAY >> $FILE_TODAY
# echo " [aftn] "$HUMAN_TODAY >> $FILE_TODAY
# echo " [evng] "$HUMAN_TODAY >> $FILE_TODAY
# echo " [othr] "$HUMAN_TODAY >> $FILE_TODAY

if [ "$1" = "add" ] ; then

  # find the required date:
  if [ "$2" = "today" ] ; then
    echo -e "\033[32m Amending today... \033[0m"
    FILE_THIS=$FILE_TODAY
  elif [ "$2" = "tomorrow" ] ; then
    echo -e "\033[32m Amending tomorrow... \033[0m"
    FILE_THIS=$FILE_TOMORROW
  elif [ "$2" = "yesterday" ] ; then
    echo -e "\033[32m Amending yesterday... \033[0m"
    FILE_THIS=$FILE_YESTERDAY
  else
    FILE_THIS=$2
    echo -e "\033[32m Amending "$FILE_THIS"... \033[0m"
  fi

  # if required date does not exist:
  if [ ! -f $FILE_THIS ]; then
    # get the required date in human form:
    echo -e "\033[32m New file created. \033[0m"
    THIS_DATE=${FILE_THIS%.txt}
    THIS_DATE_HUMAN=$(date -j -f "%Y-%m-%d" "$THIS_DATE" "$DHUMAN")
    # write the required date:
    echo " [date] "$THIS_DATE_HUMAN > $FILE_THIS
    echo " [morn] " >> $FILE_THIS
    echo " [aftn] " >> $FILE_THIS
    echo " [evng] " >> $FILE_THIS
    echo " [oth1] " >> $FILE_THIS
  fi

  # add to the required date file:

  # store current data:
  i=0
  while read p; do
    if [ $i -eq 0 ] ; then
      echo "$p" > temp.txt
      i=1
    else 
      echo "$p" >> temp.txt
    fi
  done < $FILE_THIS

  # loop over current data:
  i=1
  found=0
  while read p; do

    # first line is copied: 
    if [ $i -eq 1 ] ; then
      echo "$p" > $FILE_THIS
      let "i=i+1"
    else
      # compare fields:
      FIELD=$(echo "$p" | cut -c1-6)
      FIELD_GOAL="[""$3""]"
      # echo "."$FIELD"."
      # echo "."$FIELD_GOAL"."
      if [ "$FIELD" = "$FIELD_GOAL" ] ; then
        echo "$FIELD"" ""$4" >> $FILE_THIS
        # echo "Wrote: ""$FIELD"" ""$4"
        found=1
      else
        echo "$p" >> $FILE_THIS
        # if didn't find keyword and last line
        NUMOFLINES=$(wc -l < "temp.txt")
        # echo $i" "$NUMOFLINES
        if [ $found -eq 0 ] ; then
          if [ $i -ge $NUMOFLINES ] ; then
            echo -e "\033[32m New field created. \033[0m"
            echo "$FIELD_GOAL"" ""$4" >> $FILE_THIS
          fi
        fi
      fi
      let "i=i+1"
    fi
  done < temp.txt

  exit 1

fi

# show calendar

# find the required date:
if [ "$1" = "today" ] ; then
  # echo -e "\033[32m Showing today... \033[0m"
  FILE_THIS=$FILE_TODAY
elif [ "$1" = "tomorrow" ] ; then
  # echo -e "\033[32m Showing tomorrow... \033[0m"
  FILE_THIS=$FILE_TOMORROW
elif [ "$1" = "yesterday" ] ; then
  # echo -e "\033[32m Showing yesterday... \033[0m"
  FILE_THIS=$FILE_YESTERDAY
else
  FILE_THIS=$1
  # echo -e "\033[32m Showing "$FILE_THIS"... \033[0m"
fi

# if required date does not exist:
if [ ! -f $FILE_THIS ]; then
  # get the required date in human form:
  echo -e "\033[32m New file created. \033[0m"
  THIS_DATE=${FILE_THIS%.txt}
  THIS_DATE_HUMAN=$(date -j -f "%Y-%m-%d" "$THIS_DATE" "$DHUMAN")
  # write the required date:
  echo " [date] "$THIS_DATE_HUMAN > $FILE_THIS
  echo " [morn] " >> $FILE_THIS
  echo " [aftn] " >> $FILE_THIS
  echo " [evng] " >> $FILE_THIS
  echo " [oth1] " >> $FILE_THIS
fi

echo ""
while read p; do
  # echo -e "$p" | tr "[" "\033[34m["

  # # recolor:
  # p=$(echo "$p" | sed "s/\[date/\[\\\033[1;31mdate/g" | sed "s/date\]/date\\\033[0m\]\\\033[31m/g")
  # p=$(echo "$p" | sed "s/\[morn/\[\\\033[1;34mmorn/g" | sed "s/morn\]/morn\\\033[0m\]\\\033[34m/g")
  # p=$(echo "$p" | sed "s/\[aftn/\[\\\033[1;34maftn/g" | sed "s/aftn\]/aftn\\\033[0m\]\\\033[34m/g")
  # p=$(echo "$p" | sed "s/\[evng/\[\\\033[1;34mevng/g" | sed "s/evng\]/evng\\\033[0m\]\\\033[34m/g")
  # p=$(echo "$p" | sed "s/\[oth/\[\\\033[1;35moth/g" | sed "s/\]/\\\033[0m\]\\\033[35m/g")
  
  # # recolor:
  p=$(echo "$p" | sed "s/\[date/\[\\\033[1;31mdate/g" | sed "s/date\]/date\\\033[0m\]\\\033[31m/g")
  p=$(echo "$p" | sed "s/\[morn/\[\\\033[1;34mmorn/g" | sed "s/morn\]/morn\\\033[0m\]\\\033[34m/g")
  p=$(echo "$p" | sed "s/\[aftn/\[\\\033[1;34maftn/g" | sed "s/aftn\]/aftn\\\033[0m\]\\\033[34m/g")
  p=$(echo "$p" | sed "s/\[evng/\[\\\033[1;34mevng/g" | sed "s/evng\]/evng\\\033[0m\]\\\033[34m/g")
  p=$(echo "$p" | sed  "s/\[oth/\[\\\033[1;35moth/g" | sed "s/\]/\\\033[0m\]\\\033[35m/g")

  # recolor:
  # p=$(echo "$p" | sed "s/\[date/\\\033[1;47;7;31m\[date/g" | sed "s/date\]/date\]\\\033[0m\\\033[31m/g")
  # p=$(echo "$p" | sed "s/\[morn/\\\033[1;47;7;32m\[morn/g" | sed "s/morn\]/morn\]\\\033[0m\\\033[32m/g")
  # p=$(echo "$p" | sed "s/\[aftn/\\\033[1;47;7;33m\[aftn/g" | sed "s/aftn\]/aftn\]\\\033[0m\\\033[33m/g")
  # p=$(echo "$p" | sed "s/\[evng/\\\033[1;47;7;34m\[evng/g" | sed "s/evng\]/evng\]\\\033[0m\\\033[34m/g")
  # p=$(echo "$p" | sed  "s/\[oth/\\\033[1;47;7;35m\[oth/g"  | sed         "s/\]/\]\\\033[0m\\\033[35m/g")

  # LINE=$(echo "$p" | sed "s/\[/\[\\\033[1m/g" | sed "s/\]/\\\033[0m\]/g")
  echo -e "\033[0m""$p"
done < $FILE_THIS

echo -e "\033[0m"
